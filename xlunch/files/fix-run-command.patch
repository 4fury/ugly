diff --git a/xlunch.c b/xlunch.c
index e76690c..3f7d0a8 100644
--- a/xlunch.c
+++ b/xlunch.c
@@ -1031,10 +1031,14 @@ void reset_prompt()
 
 void run_command(char * cmd_orig)
 {
-
-    char cmd[512];
+    char *cmd;
     char *array[100] = {0};
-    strcpy(cmd,cmd_orig);
+
+    cmd = strdup(cmd_orig);
+    if (!cmd) {
+        fprintf(stderr, "Out of memory!\n");
+        exit(EXIT_FAILURE);
+    }
 
     int isrecur = starts_with(":recur ", cmd_orig) || (strcmp(":recur", cmd_orig) == 0);
     if(isrecur) {
@@ -1067,7 +1071,7 @@ void run_command(char * cmd_orig)
                 return;
             }
         }
-        array[0] = "/bin/bash";
+        array[0] = "/bin/sh";
         array[1] = "-c";
         array[2] = cmd_orig;
         array[3] = NULL;
@@ -1078,33 +1082,33 @@ void run_command(char * cmd_orig)
     if (dont_quit)
     {
         pid_t pid=fork();
-        if (pid==0) // child process
-        {
+
+        switch (pid) {
+        case 0:   /* Child process */
             if (!multiple_instances) close(lock);
             printf("Forking command: %s\n",cmd);
-            int err;
-            err = execvp(array[0],array);
-            fprintf(stderr,"Error forking %s : %d\n",cmd,err);
-            exit(OKAY);
-        }
-        else if (pid<0) // error forking
-        {
-            fprintf(stderr,"Error running %s\n",cmd);
-        }
-        else // parent process
-        {
+            break;
+
+        case -1:  /* Error */
+            perror("fork");
+            /*FALLTHROUGH*/
+
+        default:  /* Parent */
             reset_prompt();
+            if (cmd != cmd_orig)
+                free(cmd);
+            return;
         }
     }
     else
     {
         cleanup();
         printf("Running command: %s\n",cmd);
-        int err;
-        err = execvp(array[0],array);
-        fprintf(stderr,"Error running %s : %d\n",cmd, err);
-        exit(OKAY);
     }
+
+    execvp(array[0],array);
+    fprintf(stderr,"Error running \"%s\": %s\n", array[0], strerror(errno));
+    exit(EXIT_FAILURE);
 }
 
 int parse_entries()
